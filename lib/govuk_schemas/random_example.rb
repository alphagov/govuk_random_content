require "govuk_schemas/random"
require "govuk_schemas/random_item_generator"
require "active_support/core_ext/hash"
require "json-schema"
require "json"

module GovukSchemas
  class RandomExample
    # TODO: add docs
    def initialize(schema:)
      @schema = schema
      @random_generator = RandomItemGenerator.new(schema: schema)
    end

    # TODO: add docs
    def self.for_schema(schema_name, schema_type:)
      schema = GovukSchemas::Schema.find(schema_name, schema_type: schema_type)
      GovukSchemas::RandomExample.new(schema: schema)
    end

    # TODO: add docs
    def payload(merge_with = {})
      item = @random_generator.payload.merge(merge_with.stringify_keys)
      errors = JSON::Validator.fully_validate(@schema, item, errors_as_objects: true)

      if errors.any?
        raise InvalidContentGenerated, error_message(item, errors)
      end

      item
    rescue KeyError => e
      raise InvalidContentGenerated, error_message(item, { message: e.message })
    end

  private

    def error_message(item, errors)
      <<err
An invalid content item was generated by the generator. This probably
means that there's a bug in the generator that causes it to output invalid
values. Below you'll find the generated payload, the validation errors and the
schema that was used. Together these should be sufficient to debug the issue.

Generated payload:
--------------------------

#{JSON.pretty_generate([item])}

Errors:
--------------------------

#{JSON.pretty_generate(errors)}

Schema:
--------------------------

#{JSON.pretty_generate(@schema)}
err
    end
  end
end
